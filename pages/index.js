import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import {
  AiFillEye,
  AiFillEyeInvisible
} from 'react-icons/ai'
import { use, useEffect, useState } from 'react'

import { getSession, useSession ,signOut} from 'next-auth/react'
import { useDispatch, useSelector } from 'react-redux'
import { AUTH_LOGIN_SUCCESS, AUTH_LOGOUT, CLEAR_AUTH_MESSAGE } from '../redux/auth/actionTypes'
import { CLEAR_TASK_MESSAGE, GET_TASK } from '../redux/task/actionTypes'
import { addTask } from '../redux/task/action'
import {toast} from 'react-toastify'
import { useRouter } from 'next/router'

export default function Home({alltasks}) {
  const { data: session ,status} = useSession()
  const taskState = useSelector(state => state.task)
  // console.log('taskState: ', taskState);
  const authState = useSelector(state => state.auth)
  // console.log('authState: ', authState);
 const dispatch = useDispatch()
 const [taskData, setTaskData] = useState('')

 const router = useRouter()

 useEffect(() => {
  if(status!=='authenticated'  && status !== 'loading'){
    router.push('/signup')
  }
}, [status])


 useEffect(() => {
    dispatch({ type: GET_TASK, payload:{
      task: alltasks,
    }})
  
  }, [alltasks,dispatch])


 useEffect(() => {
   if(session?.user?.username){
    dispatch({ type: AUTH_LOGIN_SUCCESS, payload:{
      user: session.user,
      message:''
    }})
   }
  }, [session,dispatch])


  useEffect(() => {
    if(taskState.message) {
      toast(taskState.message, {
        position: "top-center",
        autoClose: 2000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: 'colored',
        type: taskState.error ? 'error' : 'success'
        });
        dispatch({ type: CLEAR_TASK_MESSAGE })
        setTaskData('')
      }
  }, [taskState.message,dispatch])
  
  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='grid items-center justify-center h-screen p-4'>

      <div className='border-2  mx-auto py-8 px-7 rounded-lg shadow-md  max-w-[505px]' >
      <p className='text-3xl mb-8'>Hello!</p>
      <h1 className='text-3xl font-semibold mb-8'>{authState.user?.username}</h1>
      <p className='text-xl mb-8'>Good to see you here!</p>
      <p className='text-[18px] font-bold mb-8'>Tasks for {new Date().toDateString()} :</p>

      {
        taskState.task && taskState.task.map((task, index) => {
          return <li key={index} className='ml-2'>{task?.task?.charAt(0).toUpperCase() + task?.task?.slice(1)}</li>
        })
      }
        
      <input type='text' className='text-md mt-8 p-2 border-2 border-gray-300 rounded-md w-full' placeholder='Eg. Need to finish my assignment' value={taskData} onChange={(e) => setTaskData(e.target.value)} />
      <button className='text-lg mt-2 p-2 border-2 border-gray-300 rounded-md w-full bg-black text-white hover:bg-white cursor-pointer hover:text-black hover hover:border-2 hover:border-black' 
      onClick={()=>{

        if(taskState.task.length === 5){
          toast('Daily limit exceeded: 5 task/day', {
            position: "top-center",
            autoClose: 2000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: 'colored',
            type: 'error'
            });
            return
        }
        if(taskData.length === 0){
          toast('Please enter a task', {
            position: "top-center",
            autoClose: 2000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: 'colored',
            type: 'error'
            });
            return
        }
        dispatch(addTask(taskData, authState.user?.id))
      }}
      >Add New Task</button>
      <button
      onClick={()=>{
        dispatch({type:AUTH_LOGOUT})

        toast('Logged out successfully', {
          position: "top-center",
          autoClose: 2000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: 'colored',
          type: 'success'
          });
          
          setTimeout(() => {
          signOut()
          }, 2000);
      }}
      className='text-lg mt-2 p-2 border-2 border-black rounded-md bg-white cursor-pointer mx-auto block hover:text-white hover:bg-black' >Logout</button>


      </div>
      </div>
      

    </>
  )
}

export async function getServerSideProps(context) {
  const { req, res } = context;
  const session = await getSession({ req });
  // console.log('session: ', session);
  let response=await fetch('https://expertia-taskmanagement.netlify.app/api/user/task', {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      userid: session?.user?.id
    }
  })
  let data=await response.json()
  // console.log('data: ', data);
 
  return {
    props: {
      alltasks: data?.tasks?.tasks || []
    }
  }
}
